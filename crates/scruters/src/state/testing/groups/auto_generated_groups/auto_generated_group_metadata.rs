use alloc::borrow::Cow;
use cargo_metadata::Metadata;
use core::fmt::{self, Display, Formatter};

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub(crate) struct AutoGeneratedGroupMetadata {
    pub package_name: String,
    pub target_name: String,
    pub target_kind: TargetKind,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub(crate) enum TargetKind {
    Bin,
    Lib,
}

impl Display for TargetKind {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        match self {
            Self::Bin => write!(f, "bin"),
            Self::Lib => write!(f, "lib"),
        }
    }
}

impl AutoGeneratedGroupMetadata {
    #[allow(clippy::unnecessary_wraps)]
    pub fn to_args(
        &self,
    ) -> Option<Vec<Cow<'static, str>>> {
        let Self { package_name, target_name, target_kind } =
            self;

        match target_kind {
            TargetKind::Bin => Some(vec![
                "--package".into(),
                package_name.clone().into(),
                "--bin".into(),
                target_name.clone().into(),
            ]),
            TargetKind::Lib => Some(vec![
                "--package".into(),
                package_name.clone().into(),
                "--lib".into(),
            ]),
        }
    }
}

pub(in crate::state) fn all_from_metadata(
    metadata: &Metadata,
) -> Vec<AutoGeneratedGroupMetadata> {
    metadata
        .packages
        .iter()
        .flat_map(|package| {
            package.targets.iter().flat_map(|target| {
                target.kind.iter().filter_map(|kind| {
                    // "bin", "example", "test", "bench",
                    // "lib", "custom-build"

                    let target_kind = match kind.as_str() {
                        "bin" => TargetKind::Bin,
                        "lib" => TargetKind::Lib,
                        _ => return None,
                    };

                    Some(AutoGeneratedGroupMetadata {
                        package_name: package.name.clone(),
                        target_name: target.name.clone(),
                        target_kind,
                    })
                })
            })
        })
        .collect()
}
